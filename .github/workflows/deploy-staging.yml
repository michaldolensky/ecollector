#source: https://github.com/streamlux/pulsebanner/blob/main/.github/workflows/deploy-staging.yml

name: Deploy to staging
# This workflow builds Docker images for each app, then pushes the images to GitHub Container Registry
# After all images are built and pushed successfully, it deploys each image to Caprover (staging)

on:
  # Trigger the workflow on push
  # but only for the main branch
  push:
    branches:
      - master
  # Allow this workflow to be triggered manually (ex: in GitHub UI)
  workflow_dispatch:

env:
  API_FOLDER: api
  FRONTEND_FOLDER: frontend


jobs:
  build_api:
    name: Build api
    runs-on: ubuntu-latest
    environment: Staging
    permissions:
      contents: read
      packages: write
    outputs:
      # output the image tag that was built and pushed so we can deploy this image tag in the deploy job
      image-tag: ${{ steps.set-image-tag.outputs.image-tag }}
    steps:
      #
      # ------------------ Setup -----------------------
      #

      # checkout GitHub repository
      - name: Checkout
        uses: actions/checkout@v2

      # If merge event triggered this, get the name of the branch
      - name: Get branch name (merge)
        if: github.event_name != 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      # If PR create event triggered this, get the name of the branch
      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV

      # install QEMU, a utility for building docker images
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Install and setup Node.JS
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      # Install npm dependencies
      - name: Install and cache dependencies
        uses: bahmutov/npm-install@v1
        with:
          working-directory: ${{env.API_FOLDER}}

      #
      #
      # ------------------  Build API -----------------------
      #
      #

      - name: Lint api
        run: npm run lint
        working-directory: ${{env.API_FOLDER}}

      - name: 'npm run build'
        run: npm run build
        working-directory: ${{env.API_FOLDER}}
#        env:
#          INPUT_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # This creates docker tags
      # https://github.com/docker/build-push-action/blob/master/docs/advanced/tags-labels.md
      - name: Docker meta
        id: api-meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/michaldolensky/ecollector-api
          # generate Docker tags based on the following events/attributes
          tags: |
            type=sha,prefix=${{ env.BRANCH_NAME }}-,priority=1000
            type=semver,priority=900,pattern={{version}},prefix=staging-
      - name: 'Build and push API image'
        uses: docker/build-push-action@v2
        with:
          file: '${{env.API_FOLDER}}/Dockerfile.prod'
          context: './${{env.API_FOLDER}}'
          platforms: linux/amd64
          push: true
          tags: ${{ steps.api-meta.outputs.tags }}
          labels: ${{ steps.api-meta.outputs.labels }}

#      - name: 'prisma migrate deploy'
#        run: npx prisma migrate deploy
#        env:
#          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - id: set-image-tag
        run: echo "::set-output name=image-tag::${{ fromJson(steps.api-meta.outputs.json).tags[0] }}"

  build_frontend:
    name: Build frontend
    runs-on: ubuntu-latest
    environment: Staging
    permissions:
      contents: read
      packages: write
    outputs:
      # output the image tag that was built and pushed so we can deploy this image tag in the deploy job
      image-tag: ${{ steps.set-image-tag.outputs.image-tag }}
    steps:
      #
      # ------------------ Setup -----------------------
      #

      # checkout GitHub repository
      - name: Checkout
        uses: actions/checkout@v2

      # If merge event triggered this, get the name of the branch
      - name: Get branch name (merge)
        if: github.event_name != 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      # If PR create event triggered this, get the name of the branch
      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV

      # install QEMU, a utility for building docker images
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Install and setup Node.JS
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      # Install npm dependencies
      - name: Install and cache dependencies
        uses: bahmutov/npm-install@v1
        with:
          working-directory: ${{env.FRONTEND_FOLDER}}
      #
      #
      # ------------------ Build frontend -----------------------
      #
      #

      # https://github.com/docker/build-push-action/blob/master/docs/advanced/tags-labels.md
      - name: Docker meta
        id: frontend-meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/michaldolensky/ecollector-frontend
          # generate Docker tags based on the following events/attributes
          tags: |
            type=sha,prefix=${{ env.BRANCH_NAME }}-,priority=1000
            type=semver,priority=900,pattern={{version}},prefix=staging-
#      - name: Lint frontend
#        run: yarn run lint
#        working-directory: ${{env.FRONTEND_FOLDER}}
      - name: 'Install @quasar/cli'
        run: npm i -g @quasar/cli

      - name: 'Build frontend'
        run: quasar build
        working-directory: ${{env.FRONTEND_FOLDER}}
        env:
          GRAPHQL_URL: ${{ secrets.GRAPHQL_URL }}
          SERVER_URL_API: ${{ secrets.SERVER_URL_API }}


      - name: Build and push frontend
        uses: docker/build-push-action@v2
        with:
          file: '${{env.FRONTEND_FOLDER}}/Dockerfile.prod'
          context: './${{env.FRONTEND_FOLDER}}'
          platforms: linux/amd64
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}

      - id: set-image-tag
        run: echo "::set-output name=image-tag::${{ fromJson(steps.frontend-meta.outputs.json).tags[0] }}"

  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build_api, build_frontend]
    environment: Staging
    concurrency: Staging

    env:
      CAPROVER_URL: ${{ secrets.CAPROVER_URL }}
      API_CAPROVER_APP_TOKEN: ${{ secrets.API_CAPROVER_APP_TOKEN }}
      FRONTEND_CAPROVER_APP_TOKEN: ${{ secrets.FRONTEND_CAPROVER_APP_TOKEN }}

    strategy:
      matrix:
        include:
          - app: ecollector-api # name of the app in Caprover
            token-key: API_CAPROVER_APP_TOKEN # key used to get CAPROVER_APP_TOKEN from env
            image: ${{ needs.build_api.outputs.image-tag }} # image to deploy
          - app: ecollector-frontend # name of the app in Caprover
            token-key: FRONTEND_CAPROVER_APP_TOKEN # key used to get CAPROVER_APP_TOKEN from env
            image: ${{ needs.build_frontend.outputs.image-tag }} # image to deploy

    steps:
      # Install Caprover CLI, which we use to deploy images to Caprover
      - name: 'Install caprover-cli'
        run: npm install -g caprover

      # Deploy each app by iterating over matrix values
      - name: 'Deploy ${{ matrix.app }}'
        env:
          APP_NAME: ${{ matrix.app }}
          APP_URL: ${{ env.CAPROVER_URL }}
          CAPROVER_APP_TOKEN: ${{ env[matrix.token-key] }}
          IMAGE_NAME: ${{ matrix.image }}
        run: 'caprover deploy --caproverUrl=$APP_URL --imageName=$IMAGE_NAME --appName=$APP_NAME'
